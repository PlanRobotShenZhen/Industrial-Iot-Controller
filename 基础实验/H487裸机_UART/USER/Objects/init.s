; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c -S -o.\objects\init.s --depend=.\objects\init.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\FWLIB\inc -I..\USER -I..\SYSTEM\inc -I..\HARDWARE\inc -I..\UTILS\inc -I.\RTE\_N32H487 -ID:\Keil_v5\ARM\PACK\Nationstech\N32H48x_DFP\1.0.0\firmware\CMSIS\device -ID:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=525 -DN32H48X -DN32H48X -DUSE_STDPERIPH_DRIVER -DN32H487 -DUSE_STDPERIPH_DRIVER --omf_browse=.\objects\init.crf ..\UTILS\src\init.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.ADC_INIT||, CODE, READONLY, ALIGN=2

ADC_INIT PROC
        PUSH     {r0-r3}
        PUSH     {r4,lr}
        SUB      sp,sp,#0x60
        LDR      r0,[sp,#0x68]
        STR      r0,[sp,#0x5c]
        BL       RCC_INIT
        LDR      r0,[sp,#0x6c]
        STR      r0,[sp,#0x58]
        BL       RCC_INIT
        MOVS     r1,#8
        MOVS     r0,#0
        BL       ADC_ConfigClk
        MOV      r1,#0x7000
        MOVS     r0,#0
        BL       RCC_ConfigAdc1mClk
        LDR      r0,[sp,#0x70]
        BL       DMA_DeInit
        LDR      r0,[sp,#0x68]
        ADDS     r0,r0,#0x84
        STR      r0,[sp,#0x20]
        LDR      r0,[sp,#0x80]
        STR      r0,[sp,#0x24]
        MOVS     r0,#0
        STR      r0,[sp,#0x28]
        LDR      r0,[sp,#0x7c]
        STR      r0,[sp,#0x2c]
        MOVS     r0,#0
        STR      r0,[sp,#0x30]
        MOVS     r0,#0x80
        STR      r0,[sp,#0x34]
        LSLS     r0,r0,#1
        STR      r0,[sp,#0x38]
        LSLS     r0,r0,#2
        STR      r0,[sp,#0x3c]
        MOVS     r0,#0x20
        STR      r0,[sp,#0x40]
        LSLS     r0,r0,#8
        STR      r0,[sp,#0x44]
        MOVS     r0,#0
        STR      r0,[sp,#0x48]
        ADD      r1,sp,#0x20
        LDR      r0,[sp,#0x70]
        BL       DMA_Init
        MOVS     r2,#1
        LDRD     r1,r0,[sp,#0x70]
        BL       DMA_RequestRemap
        MOVS     r1,#1
        LDR      r0,[sp,#0x70]
        BL       DMA_EnableChannel
        MOVS     r0,#0
        STR      r0,[sp,#8]
        MOVS     r0,#1
        STRB     r0,[sp,#0xc]
        STRB     r0,[sp,#0xd]
        MOV      r0,#0x2a0000
        STR      r0,[sp,#0x10]
        MOVS     r0,#0
        STR      r0,[sp,#0x14]
        LDR      r0,[sp,#0x7c]
        UXTB     r0,r0
        STRB     r0,[sp,#0x18]
        MOVS     r0,#3
        STR      r0,[sp,#0x1c]
        ADD      r1,sp,#8
        LDR      r0,|L0.260|
        BL       ADC_Init
        MOVS     r4,#0
        B        |L0.192|
|L0.166|
        ADDS     r0,r4,#1
        UXTB     r0,r0
        STR      r0,[sp,#4]
        LDRB     r3,[sp,#0x84]
        LDR      r2,[sp,#0x78]
        LDRB     r1,[r2,r4]
        LDRB     r2,[sp,#4]
        LDR      r0,[sp,#0x68]
        BL       ADC_ConfigRegularChannel
        ADDS     r4,r4,#1
|L0.192|
        LDR      r0,[sp,#0x7c]
        CMP      r0,r4
        BHI      |L0.166|
        MOVS     r1,#1
        LDR      r0,|L0.260|
        BL       ADC_Enable
        NOP      
|L0.208|
        MOVS     r1,#0x40
        LDR      r0,|L0.260|
        BL       ADC_GetFlagStatus
        CMP      r0,#0
        BEQ      |L0.208|
        MOVS     r1,#0
        LDR      r0,|L0.260|
        BL       ADC_CalibrationOperation
        NOP      
|L0.230|
        MOVS     r1,#0
        LDR      r0,|L0.260|
        BL       ADC_GetCalibrationStatus
        CMP      r0,#0
        BNE      |L0.230|
        MOV      r1,#0x400000
        LDR      r0,|L0.260|
        BL       ADC_SetDMATransferMode
        ADD      sp,sp,#0x60
        POP      {r4}
        LDR      pc,[sp],#0x14
        ENDP

|L0.260|
        DCD      0x4002b000

        AREA ||i.BTIM1_INIT||, CODE, READONLY, ALIGN=2

BTIM1_INIT PROC
        PUSH     {r4,lr}
        VPUSH    {d8-d10}
        SUB      sp,sp,#0x50
        LDR      r0,|L1.180|
        LDR      r0,[r0,#0]  ; <Data17>
        STR      r0,[sp,#0x4c]
        LDR      r0,[sp,#0x4c]
        BL       RCC_INIT
        MOV      r0,#0xa00
        BL       RCC_ConfigPclk1
        ADD      r0,sp,#0x30
        BL       RCC_GetClocksFreqValue
        MOVS     r0,#0x36
        STRB     r0,[sp,#0x2c]
        MOVS     r0,#1
        STRB     r0,[sp,#0x2d]
        MOVS     r0,#0
        STRB     r0,[sp,#0x2e]
        MOVS     r0,#1
        STRB     r0,[sp,#0x2f]
        ADD      r0,sp,#0x2c
        BL       NVIC_Init
        MOV      r0,sp
        BL       TIM_InitTimBaseStruct
        MOVS     r0,#9
        STR      r0,[sp,#8]
        MOVS     r0,#0
        STR      r0,[sp,#0]
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#4]
        MOV      r1,sp
        LDR      r0,|L1.184|
        BL       TIM_InitTimeBase
        LDR      r1,[sp,#0x38]
        LSLS     r0,r1,#1
        BL       __aeabi_ui2d
        VMOV     d10,r0,r1
        VLDR     d0,|L1.188|
        VMOV     r2,r3,d0
        BL       __aeabi_ddiv
        VMOV     d9,r0,r1
        VLDR     d0,|L1.196|
        VMOV     r2,r3,d0
        BL       __aeabi_dsub
        VMOV     d8,r0,r1
        BL       __aeabi_d2uiz
        MOV      r4,r0
        MOV      r2,#0x100
        MOV      r1,r4
        LDR      r0,|L1.184|
        BL       TIM_ConfigPrescaler
        MOVS     r2,#1
        LSLS     r1,r2,#16
        LDR      r0,|L1.184|
        BL       TIM_ConfigInt
        MOVS     r1,#1
        LDR      r0,|L1.184|
        BL       TIM_Enable
        ADD      sp,sp,#0x50
        VPOP     {d8-d10}
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.180|
        DCD      ||.constdata||+0x58
|L1.184|
        DCD      0x40003c00
|L1.188|
        DCFD     0x416312d000000000 ; 10000000
|L1.196|
        DCFD     0x3ff0000000000000 ; 1

        AREA ||i.BTIM1_IRQHandler||, CODE, READONLY, ALIGN=2

BTIM1_IRQHandler PROC
        PUSH     {r4,lr}
        MOV      r1,#0x10000
        LDR      r0,|L2.36|
        BL       TIM_GetIntStatus
        CBZ      r0,|L2.34|
        MOV      r1,#0x10000
        LDR      r0,|L2.36|
        BL       TIM_ClrIntPendingBit
        LDR      r0,|L2.40|
        LDR      r0,[r0,#0]  ; g_Delayus_Time
        ADDS     r0,r0,#1
        LDR      r1,|L2.40|
        STR      r0,[r1,#0]  ; g_Delayus_Time
|L2.34|
        POP      {r4,pc}
        ENDP

|L2.36|
        DCD      0x40003c00
|L2.40|
        DCD      g_Delayus_Time

        AREA ||i.Delay_ms||, CODE, READONLY, ALIGN=1

Delay_ms PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r5,#0
        B        |L3.18|
|L3.8|
        MOV      r0,#0x3e8
        BL       Delay_us
        ADDS     r5,r5,#1
|L3.18|
        CMP      r5,r4
        BCC      |L3.8|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.Delay_us||, CODE, READONLY, ALIGN=2

Delay_us PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOVS     r0,#0
        LDR      r1,|L4.40|
        STR      r0,[r1,#0]  ; g_Delayus_Time
        MOVS     r1,#1
        LDR      r0,|L4.44|
        BL       TIM_Enable
        NOP      
|L4.20|
        LDR      r0,|L4.40|
        LDR      r0,[r0,#0]  ; g_Delayus_Time
        CMP      r0,r4
        BCC      |L4.20|
        MOVS     r1,#0
        LDR      r0,|L4.44|
        BL       TIM_Enable
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L4.40|
        DCD      g_Delayus_Time
|L4.44|
        DCD      0x40003c00

        AREA ||i.GPIO_INIT||, CODE, READONLY, ALIGN=1

GPIO_INIT PROC
        PUSH     {r0-r3}
        PUSH     {lr}
        SUB      sp,sp,#0x34
        LDR      r0,[sp,#0x38]
        STR      r0,[sp,#0x30]
        BL       RCC_INIT
        MOV      r0,sp
        BL       GPIO_InitStruct
        MOVS     r1,#0x18
        ADD      r0,sp,#0x18
        BL       __aeabi_memclr4
        LDR      r0,[sp,#0x3c]
        STR      r0,[sp,#0x18]
        LDR      r0,[sp,#0x40]
        STR      r0,[sp,#0x1c]
        LDR      r0,[sp,#0x44]
        STR      r0,[sp,#0x20]
        LDR      r0,[sp,#0x48]
        MOVS     r2,#0x18
        ADD      r1,sp,#0x18
        STR      r0,[sp,#0x2c]
        MOV      r0,sp
        BL       __aeabi_memcpy4
        MOV      r1,sp
        LDR      r0,[sp,#0x38]
        BL       GPIO_InitPeripheral
        ADD      sp,sp,#0x34
        LDR      pc,[sp],#0x14
        ENDP


        AREA ||i.GPIO_Write_Delayms||, CODE, READONLY, ALIGN=1

GPIO_Write_Delayms PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        MOV      r4,r3
        UXTH     r1,r5
        MOV      r2,r7
        MOV      r0,r6
        BL       GPIO_WriteBits
        CBNZ     r4,|L6.28|
|L6.24|
        POP      {r4-r8,pc}
|L6.28|
        MOV      r0,r4
        BL       systick_delay_ms
        NOP      
        B        |L6.24|
        ENDP


        AREA ||i.GPIO_Write_Delayus||, CODE, READONLY, ALIGN=1

GPIO_Write_Delayus PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        MOV      r4,r3
        UXTH     r1,r5
        MOV      r2,r7
        MOV      r0,r6
        BL       GPIO_WriteBits
        CBNZ     r4,|L7.28|
|L7.24|
        POP      {r4-r8,pc}
|L7.28|
        MOV      r0,r4
        BL       systick_delay_us
        NOP      
        B        |L7.24|
        ENDP


        AREA ||i.RCC_INIT||, CODE, READONLY, ALIGN=2

RCC_INIT PROC
        PUSH     {r0,lr}
        LDR      r1,|L8.616|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.20|
        MOVS     r1,#1
        MOV      r0,r1
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.20|
        LDR      r1,|L8.620|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.38|
        MOVS     r1,#1
        MOVS     r0,#2
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.38|
        LDR      r1,|L8.624|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.56|
        MOVS     r1,#1
        MOVS     r0,#4
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.56|
        LDR      r1,|L8.628|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.74|
        MOVS     r1,#1
        MOVS     r0,#8
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.74|
        LDR      r1,|L8.632|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.92|
        MOVS     r1,#1
        MOVS     r0,#0x10
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.92|
        LDR      r1,|L8.636|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.110|
        MOVS     r1,#1
        MOVS     r0,#0x20
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.110|
        LDR      r1,|L8.640|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.128|
        MOVS     r1,#1
        MOVS     r0,#0x40
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.128|
        LDR      r1,|L8.644|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.146|
        MOVS     r1,#1
        MOVS     r0,#0x80
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.146|
        LDR      r1,|L8.648|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.164|
        MOVS     r1,#1
        MOVS     r0,#0x20
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.164|
        LDR      r1,|L8.652|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.182|
        MOVS     r1,#1
        MOVS     r0,#4
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.182|
        LDR      r1,|L8.656|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.200|
        MOVS     r1,#1
        MOVS     r0,#8
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.200|
        LDR      r1,|L8.660|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.218|
        MOVS     r1,#1
        LSLS     r0,r1,#14
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.218|
        LDR      r1,|L8.664|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.236|
        MOVS     r1,#1
        MOVS     r0,#0x20
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.236|
        LDR      r1,|L8.668|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.254|
        MOVS     r1,#1
        MOVS     r0,#0x40
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.254|
        LDR      r1,|L8.672|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.272|
        MOVS     r1,#1
        MOVS     r0,#0x80
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.272|
        LDR      r1,|L8.676|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.290|
        MOVS     r1,#1
        MOVS     r0,#0x10
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.290|
        LDR      r1,|L8.680|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.308|
        MOVS     r1,#1
        ASRS     r0,r0,#20
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.308|
        LDR      r1,|L8.684|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.326|
        MOVS     r1,#1
        ASRS     r0,r0,#19
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.326|
        LDR      r1,|L8.688|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.344|
        MOVS     r1,#1
        ASRS     r0,r0,#18
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.344|
        LDR      r1,|L8.692|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.362|
        MOVS     r1,#1
        ASRS     r0,r0,#17
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.362|
        LDR      r1,|L8.696|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.380|
        MOVS     r1,#1
        ASRS     r0,r0,#16
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.380|
        LDR      r1,|L8.700|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.398|
        MOVS     r1,#1
        ASRS     r0,r0,#15
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.398|
        LDR      r1,|L8.704|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.416|
        MOVS     r1,#1
        LSLS     r0,r1,#16
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.416|
        LDR      r1,|L8.708|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.434|
        MOVS     r1,#1
        ASRS     r0,r0,#22
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.434|
        LDR      r1,|L8.712|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.452|
        MOVS     r1,#1
        ASRS     r0,r0,#21
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.452|
        LDR      r1,|L8.716|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.470|
        MOVS     r1,#1
        ASRS     r0,r0,#20
        BL       RCC_EnableAPB2PeriphClk
        B        |L8.612|
|L8.470|
        LDR      r1,|L8.720|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.488|
        MOVS     r1,#1
        LSLS     r0,r1,#22
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.488|
        LDR      r0,[sp,#0]
        CMP      r0,#0x40004000
        BNE      |L8.506|
        MOVS     r1,#1
        LSLS     r0,r1,#23
        BL       RCC_EnableAPB1PeriphClk
        B        |L8.612|
|L8.506|
        LDR      r1,|L8.724|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.524|
        MOVS     r1,#1
        ASRS     r0,r0,#21
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.524|
        LDR      r1,|L8.728|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.542|
        MOVS     r1,#1
        ASRS     r0,r0,#20
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.542|
        LDR      r1,|L8.732|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.560|
        MOVS     r1,#1
        ASRS     r0,r0,#19
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.560|
        LDR      r1,|L8.736|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.578|
        MOVS     r1,#1
        ASRS     r0,r0,#18
        BL       RCC_EnableAHB1PeriphClk
        B        |L8.612|
|L8.578|
        LDR      r1,|L8.740|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.596|
        MOVS     r1,#1
        MOVS     r0,#0x80
        BL       RCC_EnableAHBPeriphClk
        B        |L8.612|
|L8.596|
        LDR      r1,|L8.744|
        LDR      r0,[sp,#0]
        CMP      r0,r1
        BNE      |L8.612|
        MOVS     r1,#1
        ASRS     r0,r0,#22
        BL       RCC_EnableAHBPeriphClk
|L8.612|
        POP      {r3,pc}
        ENDP

        DCW      0x0000
|L8.616|
        DCD      0x4002c000
|L8.620|
        DCD      0x4002c400
|L8.624|
        DCD      0x4002c800
|L8.628|
        DCD      0x4002cc00
|L8.632|
        DCD      0x4002d000
|L8.636|
        DCD      0x4002d400
|L8.640|
        DCD      0x4002d800
|L8.644|
        DCD      0x4002dc00
|L8.648|
        DCD      0x40011c00
|L8.652|
        DCD      0x40000c00
|L8.656|
        DCD      0x40001000
|L8.660|
        DCD      0x40012800
|L8.664|
        DCD      0x40006800
|L8.668|
        DCD      0x40012000
|L8.672|
        DCD      0x40012400
|L8.676|
        DCD      0x40001400
|L8.680|
        DCD      0x40002c00
|L8.684|
        DCD      0x40003000
|L8.688|
        DCD      0x40003400
|L8.692|
        DCD      0x40003800
|L8.696|
        DCD      0x40005c00
|L8.700|
        DCD      0x40006000
|L8.704|
        DCD      0x40006400
|L8.708|
        DCD      0x40010c00
|L8.712|
        DCD      0x40011000
|L8.716|
        DCD      0x40011400
|L8.720|
        DCD      0x40003c00
|L8.724|
        DCD      0x4002b000
|L8.728|
        DCD      0x4002b400
|L8.732|
        DCD      0x4002b800
|L8.736|
        DCD      0x4002bc00
|L8.740|
        DCD      0x40020000
|L8.744|
        DCD      0x40020400

        AREA ||i.SI2C_INIT||, CODE, READONLY, ALIGN=2

SI2C_INIT PROC
        PUSH     {r0-r3,lr}
        SUB      sp,sp,#0x4c
        LDR      r0,[sp,#0x4c]
        STR      r0,[sp,#0x48]
        BL       RCC_INIT
        LDR      r0,[sp,#0x50]
        STR      r0,[sp,#0x44]
        BL       RCC_INIT
        MOVS     r2,#0x14
        LDR      r1,|L9.132|
        ADD      r0,sp,#0x30
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x4c]
        STR      r0,[sp,#0x30]
        LDR      r0,[sp,#0x54]
        MOVS     r2,#0x14
        ADD      r1,sp,#0x30
        STR      r0,[sp,#0x34]
        ADD      r0,sp,#8
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x18]
        STR      r0,[sp,#0]
        ADD      r0,sp,#8
        LDM      r0,{r0-r3}
        BL       GPIO_INIT
        MOVS     r2,#0x14
        LDR      r1,|L9.132|
        ADDS     r1,r1,#0x14
        ADD      r0,sp,#0x1c
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x50]
        STR      r0,[sp,#0x1c]
        LDR      r0,[sp,#0x58]
        MOVS     r2,#0x14
        ADD      r1,sp,#0x1c
        STR      r0,[sp,#0x20]
        ADD      r0,sp,#8
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x18]
        STR      r0,[sp,#0]
        ADD      r0,sp,#8
        LDM      r0,{r0-r3}
        BL       GPIO_INIT
        LDR      r2,[sp,#0x54]
        UXTH     r1,r2
        MOVS     r2,#1
        LDR      r0,[sp,#0x4c]
        BL       GPIO_WriteBits
        LDR      r2,[sp,#0x58]
        UXTH     r1,r2
        MOVS     r2,#1
        LDR      r0,[sp,#0x50]
        BL       GPIO_WriteBits
        ADD      sp,sp,#0x5c
        POP      {pc}
        ENDP

        DCW      0x0000
|L9.132|
        DCD      ||.constdata||+0x30

        AREA ||i.USART_INIT||, CODE, READONLY, ALIGN=2

USART_INIT PROC
        PUSH     {r0-r2,lr}
        SUB      sp,sp,#0x78
        LDR      r0,[sp,#0x80]
        LDR      r0,[r0,#0]
        STR      r0,[sp,#0x74]
        BL       RCC_INIT
        LDR      r0,[sp,#0x7c]
        LDR      r0,[r0,#0]
        STR      r0,[sp,#0x70]
        BL       RCC_INIT
        LDR      r0,[sp,#0x78]
        STR      r0,[sp,#0x6c]
        BL       RCC_INIT
        ADD      r0,sp,#0x24
        BL       GPIO_InitStruct
        MOVS     r2,#0x18
        LDR      r1,|L10.228|
        ADD      r0,sp,#0x54
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x80]
        LDR      r0,[r0,#4]
        STR      r0,[sp,#0x54]
        LDR      r0,[sp,#0x80]
        LDR      r0,[r0,#0x10]
        MOVS     r2,#0x18
        ADD      r1,sp,#0x54
        STR      r0,[sp,#0x68]
        ADD      r0,sp,#0x24
        BL       __aeabi_memcpy4
        LDR      r1,[sp,#0x80]
        LDR      r0,[r1,#0]
        ADD      r1,sp,#0x24
        BL       GPIO_InitPeripheral
        MOVS     r2,#0x18
        LDR      r1,|L10.228|
        ADDS     r1,r1,#0x18
        ADD      r0,sp,#0x3c
        BL       __aeabi_memcpy4
        LDR      r0,[sp,#0x7c]
        LDR      r0,[r0,#4]
        STR      r0,[sp,#0x3c]
        LDR      r0,[sp,#0x7c]
        LDR      r0,[r0,#0x10]
        MOVS     r2,#0x18
        ADD      r1,sp,#0x3c
        STR      r0,[sp,#0x50]
        ADD      r0,sp,#0x24
        BL       __aeabi_memcpy4
        LDR      r1,[sp,#0x7c]
        LDR      r0,[r1,#0]
        ADD      r1,sp,#0x24
        BL       GPIO_InitPeripheral
        LDR      r0,[sp,#0x78]
        BL       USARTx_IRQn
        UXTB     r0,r0
        STRB     r0,[sp,#0x20]
        MOVS     r0,#0
        STRB     r0,[sp,#0x21]
        STRB     r0,[sp,#0x22]
        MOVS     r0,#1
        STRB     r0,[sp,#0x23]
        ADD      r0,sp,#0x20
        BL       NVIC_Init
        ADD      r0,sp,#4
        BL       USART_StructInit
        MOV      r0,#0x1c200
        STR      r0,[sp,#4]
        MOVS     r0,#0
        STR      r0,[sp,#8]
        STR      r0,[sp,#0xc]
        STR      r0,[sp,#0x10]
        STR      r0,[sp,#0x18]
        STR      r0,[sp,#0x1c]
        MOVS     r0,#6
        STR      r0,[sp,#0x14]
        ADD      r1,sp,#4
        LDR      r0,[sp,#0x78]
        BL       USART_Init
        MOVS     r2,#1
        LDR      r1,|L10.232|
        LDR      r0,[sp,#0x78]
        BL       USART_ConfigInt
        MOVS     r2,#1
        LDR      r1,|L10.236|
        LDR      r0,[sp,#0x78]
        BL       USART_ConfigInt
        MOVS     r1,#1
        LDR      r0,[sp,#0x78]
        BL       USART_Enable
        ADD      sp,sp,#0x84
        POP      {pc}
        ENDP

        DCW      0x0000
|L10.228|
        DCD      ||.constdata||
|L10.232|
        DCD      0x10000200
|L10.236|
        DCD      0x10000100

        AREA ||i.USARTx_IRQn||, CODE, READONLY, ALIGN=2

USARTx_IRQn PROC
        MOV      r1,r0
        LDR      r0,|L11.88|
        CMP      r1,r0
        BNE      |L11.12|
        MOVS     r0,#0x25
|L11.10|
        BX       lr
|L11.12|
        LDR      r0,|L11.92|
        CMP      r1,r0
        BNE      |L11.22|
        MOVS     r0,#0x26
        B        |L11.10|
|L11.22|
        LDR      r0,|L11.96|
        CMP      r1,r0
        BNE      |L11.32|
        MOVS     r0,#0x27
        B        |L11.10|
|L11.32|
        LDR      r0,|L11.100|
        CMP      r1,r0
        BNE      |L11.42|
        MOVS     r0,#0x34
        B        |L11.10|
|L11.42|
        LDR      r0,|L11.104|
        CMP      r1,r0
        BNE      |L11.52|
        MOVS     r0,#0x35
        B        |L11.10|
|L11.52|
        LDR      r0,|L11.108|
        CMP      r1,r0
        BNE      |L11.62|
        MOVS     r0,#0x4a
        B        |L11.10|
|L11.62|
        LDR      r0,|L11.112|
        CMP      r1,r0
        BNE      |L11.72|
        MOVS     r0,#0x4b
        B        |L11.10|
|L11.72|
        LDR      r0,|L11.116|
        CMP      r1,r0
        BNE      |L11.82|
        MOVS     r0,#0x55
        B        |L11.10|
|L11.82|
        MOVS     r0,#0x25
        B        |L11.10|
        ENDP

        DCW      0x0000
|L11.88|
        DCD      0x40011c00
|L11.92|
        DCD      0x40000c00
|L11.96|
        DCD      0x40001000
|L11.100|
        DCD      0x40012800
|L11.104|
        DCD      0x40006800
|L11.108|
        DCD      0x40012000
|L11.112|
        DCD      0x40012400
|L11.116|
        DCD      0x40001400

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

        DCD      0x00000000
        DCD      0x00000002
        DCD      0x00000001
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000002
        DCD      0x00000001
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000011
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x00000011
        DCD      0x00000000
        DCD      0x00000000
        DCD      0x40003c00

        AREA ||.data||, DATA, ALIGN=2

g_Delayus_Time
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\UTILS\\src\\init.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_init_c_RCC_INIT____REV16|
#line 463 "..\\CORE\\cmsis_armcc.h"
|__asm___6_init_c_RCC_INIT____REV16| PROC
#line 464

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_init_c_RCC_INIT____REVSH|
#line 478
|__asm___6_init_c_RCC_INIT____REVSH| PROC
#line 479

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_init_c_RCC_INIT____RRX|
#line 665
|__asm___6_init_c_RCC_INIT____RRX| PROC
#line 666

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT ADC_INIT [CODE]
        EXPORT BTIM1_INIT [CODE]
        EXPORT BTIM1_IRQHandler [CODE]
        EXPORT Delay_ms [CODE]
        EXPORT Delay_us [CODE]
        EXPORT GPIO_INIT [CODE]
        EXPORT GPIO_Write_Delayms [CODE]
        EXPORT GPIO_Write_Delayus [CODE]
        EXPORT RCC_INIT [CODE]
        EXPORT SI2C_INIT [CODE]
        EXPORT USART_INIT [CODE]
        EXPORT USARTx_IRQn [CODE]
        EXPORT g_Delayus_Time [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT RCC_EnableAHB1PeriphClk [CODE]
        IMPORT RCC_EnableAPB2PeriphClk [CODE]
        IMPORT RCC_EnableAPB1PeriphClk [CODE]
        IMPORT RCC_EnableAHBPeriphClk [CODE]
        IMPORT GPIO_InitStruct [CODE]
        IMPORT __aeabi_memclr4 [CODE]
        IMPORT __aeabi_memcpy4 [CODE]
        IMPORT GPIO_InitPeripheral [CODE]
        IMPORT GPIO_WriteBits [CODE]
        IMPORT systick_delay_ms [CODE]
        IMPORT systick_delay_us [CODE]
        IMPORT NVIC_Init [CODE]
        IMPORT USART_StructInit [CODE]
        IMPORT USART_Init [CODE]
        IMPORT USART_ConfigInt [CODE]
        IMPORT USART_Enable [CODE]
        IMPORT RCC_ConfigPclk1 [CODE]
        IMPORT RCC_GetClocksFreqValue [CODE]
        IMPORT TIM_InitTimBaseStruct [CODE]
        IMPORT TIM_InitTimeBase [CODE]
        IMPORT __aeabi_ui2d [CODE]
        IMPORT __aeabi_ddiv [CODE]
        IMPORT __aeabi_dsub [CODE]
        IMPORT __aeabi_d2uiz [CODE]
        IMPORT TIM_ConfigPrescaler [CODE]
        IMPORT TIM_ConfigInt [CODE]
        IMPORT TIM_Enable [CODE]
        IMPORT TIM_GetIntStatus [CODE]
        IMPORT TIM_ClrIntPendingBit [CODE]
        IMPORT ADC_ConfigClk [CODE]
        IMPORT RCC_ConfigAdc1mClk [CODE]
        IMPORT DMA_DeInit [CODE]
        IMPORT DMA_Init [CODE]
        IMPORT DMA_RequestRemap [CODE]
        IMPORT DMA_EnableChannel [CODE]
        IMPORT ADC_Init [CODE]
        IMPORT ADC_ConfigRegularChannel [CODE]
        IMPORT ADC_Enable [CODE]
        IMPORT ADC_GetFlagStatus [CODE]
        IMPORT ADC_CalibrationOperation [CODE]
        IMPORT ADC_GetCalibrationStatus [CODE]
        IMPORT ADC_SetDMATransferMode [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
